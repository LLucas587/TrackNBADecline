import igraph as ig
import plotly.graph_objs as go
import plotly.express as px
import pandas as pd
import python_ta
import compute
import data


def plot_avg_decline(stat: str) -> None:
    """Uses plotly to plot the median decline of a specific stat from age 27-42

    Preconditions:
        - Stat must be a valid stat
    """

    declines = []
    years = []
    b = compute.create_tree1()
    for x in range(27, 42):
        c = compute.two_stat(x, x + 1, stat, b)
        c = compute.combine_trades(c)
        if stat != 'g':
            declines += [compute.find_median_decline(c)]
        else:
            declines += [compute.find_median_decline_games(c)]
        years += [str(x) + '-' + str(x + 1)]

    fig = px.scatter(x=years, y=declines)
    fig.update_layout(
        title='The decline of ' + stat + ' over time',
        xaxis_title_text='Age of Player',
        yaxis_title_text='Percentage change'
    )
    fig.show()


def plot_all_avg_decline() -> None:
    """Uses plotly to plot the median decline of all stats of all players from age 27-42
    """
    d = data.get_data()
    statlist = list(d.columns)
    statlist = statlist[10:]  # removing non per game statistics like position or season
    figs = {}

    for y in statlist:
        declines = []
        years = []
        b = compute.create_tree1()
        for x in range(27, 42):
            c = compute.two_stat(x, x + 1, y, b)
            c = compute.combine_trades(c)
            if y != 'g':
                declines += [compute.find_median_decline(c)]
            else:
                declines += [compute.find_median_decline_games(c)]
            years += [str(x) + '-' + str(x + 1)]
        figs[y] = declines
        figs['year'] = years

    df = pd.DataFrame(figs)
    fig = px.line(df, x=df['year'], y=df[statlist[0]])
    fig.data[0].name = 'mp_per_game'
    fig.update_traces(showlegend=True)
    for stat in statlist[1:]:
        fig.add_scatter(x=df['year'], y=df[stat], name=stat)

    fig.update_layout(
        title='The Average Decline of All Stats Over Time',
        xaxis_title_text='Age of Player',
        yaxis_title_text='Percentage change',
        legend_title_text='Statistic'
    )
    fig.show()


def plot_single_decline(player: str, stat: str, bsts: dict[tuple:compute.BinarySearchTree]) -> None:
    """Uses plotly to plot the decline of one player of one specific stat in their career

    Preconditions:
        - Stat must be a valid stat
        - Player must be a valid player
        - Bsts are pre-generated by load_all_singular_stat_bst()
    """
    statslist = compute.return_player_career_decline(player, bsts)
    declines = []
    years = []
    for x in statslist:
        if x[0] == stat:
            declines += [x[1][1]]
            years += [str(x[1][2]) + '-' + str(x[1][3])]

    fig = px.scatter(x=years, y=declines)
    fig.update_layout(
        title='The decline of ' + player + '\'s ' + stat + ' over time',
        xaxis_title_text='Age of Player',
        yaxis_title_text='Percentage change'
    )
    fig.show()


def plot_single_decline_allstats(player: str, bsts: dict[tuple:compute.BinarySearchTree]) -> None:
    """Use plotly to plot the decline of all stats of one player in their career

    Preconditions:
        - Player must be a valid player
        - Bsts are pre-generated by load_all_singular_stat_bst()
    """
    statslist = compute.return_player_career_decline(player, bsts)
    declines = {}
    years = []
    for x in statslist:
        if x[0] in declines:
            declines[x[0]] += [x[1][1]]
        else:
            declines[x[0]] = [x[1][1]]
        if str(x[1][2]) + '-' + str(x[1][3]) not in years:
            years += [str(x[1][2]) + '-' + str(x[1][3])]

    declines['year'] = years
    df = pd.DataFrame(declines)
    statlist = list(df.columns)
    fig = px.line(df, x=df['year'], y=df[statlist[0]])
    fig.data[0].name = 'mp_per_game'
    fig.update_traces(showlegend=True)
    for stat in statlist[1:]:
        fig.add_scatter(x=df['year'], y=df[stat], name=stat)

    fig.update_layout(
        title='The decline of ' + player + '\'s stats over time',
        xaxis_title_text='Age of Player',
        yaxis_title_text='Percentage change',
        legend_title_text='Statistic'
    )
    fig.show()


def man_igraph(bst: compute.BinarySearchTree) -> ig.Graph:
    """ Turns my implementation of binary search tree into an igraph object usable in the plot_igraphs function below
    """
    g = ig.Graph.Tree(len(bst.items()), 2)
    g.vs['tuple'] = bst.items()
    edges = bst.return_subtree_tuples()
    new_edges = [(xs[0], xs[1].root) for xs in edges if xs[1] is not None]
    new_edges += [(xs[0], xs[2].root) for xs in edges if xs[2] is not None]
    for x in range(0, len(new_edges)):
        first_edge = bst.items().index(new_edges[x][0])
        second_edge = bst.items().index(new_edges[x][1])
        new_edges[x] = (first_edge, second_edge)
    for x in g.get_edgelist():
        g.delete_edges(x)
    g.add_edges(new_edges)
    return g


def plot_igraph(g: ig.Graph, stat: str) -> None:
    """
    Function to plot the igraph object as a tree
    **** As a function of plotly, there are a few plots that may be finnicky and have weird placement of
    edges despite the edges and vertices being otherwise correct

    Function Adapted from “Tree-plots,” Tree-plots in Python. [Online]. Available: https://plotly.com/python/tree-plots/
    [Accessed: 20-Mar-2023].
    >>> computed = compute.create_singular_stat_bst_vis(30,31,'trb_per_game')
    >>> g = man_igraph(computed)
    >>> plot_igraph(g,'trb_per_game')
    """
    nr_vertices = len(g.vs.indices)
    lay = g.layout('rt')
    position = {k: lay[k] for k in range(nr_vertices)}
    y = [lay[k][1] for k in range(nr_vertices)]
    m = max(y)

    e = [edges.tuple for edges in g.es]  # list of edges

    length = len(position)
    xn = [position[k][0] for k in range(length)]
    yn = [2 * m - position[k][1] for k in range(length)]
    xe = []
    ye = []
    for edge in e:
        xe += [position[edge[0]][0], position[edge[1]][0], None]
        ye += [2 * m - position[edge[0]][1], 2 * m - position[edge[1]][1], None]

    labels = list(g.vs['tuple'])

    fig = go.Figure()
    fig.add_trace(go.Scatter(x=xe,
                             y=ye,
                             mode='lines',
                             line=dict(color='rgb(210,210,210)', width=1),
                             hoverinfo='none'
                             ))
    fig.add_trace(go.Scatter(x=xn,
                             y=yn,
                             mode='markers',
                             name='bla',
                             marker=dict(symbol='circle-dot',
                                         size=18,
                                         color='#6175c1',  # '#DB4551',
                                         line=dict(color='rgb(50,50,50)', width=1)
                                         ),
                             text=labels,
                             hoverinfo='text',
                             opacity=0.8
                             ))
    fig.update_layout(
        title='Binary Search Tree of Player '
              'Decline Over a Singular Age'
              '(Percentage Change of ' + stat + ', Name, Age During First Season, Age During Second Season)')
    fig.show()


if __name__ == "__main__":
    import doctest
    doctest.testmod()

    python_ta.check_all(config={
        'extra-imports': ['plotly.express', 'compute', 'data', 'igraph', 'plotly.graph_objs', 'pandas'],
        'allowed-io': [],  # the names (strs) of functions that call print/open/input
        'max-line-length': 120,
        'disable': ['R0914']
    })
